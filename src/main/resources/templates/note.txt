?? Iqueston with validation 
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Questions</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Fade + slide animation for sections */
    .section-block {
      transition: opacity 0.5s ease, transform 0.5s ease;
      opacity: 0;
      transform: translateX(30px);
      position: absolute;
      width: 100%;
      left: 0;
      top: 0;
      pointer-events: none;
    }

    .section-block.active {
      opacity: 1;
      transform: translateX(0);
      position: relative;
      pointer-events: auto;
    }

    /* Radio buttons inline */
    .radio-row {
      display: flex;
      gap: 1.5rem;
      flex-wrap: wrap;
    }

    /* Navigation buttons */
    button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    /* Highlight unanswered questions */
    .validation-error label {
      ring: 2px solid #ef4444; /* Red ring (Tailwind red-500) alternative */
      box-shadow: 0 0 0 2px #ef4444;
    }
  </style>
</head>

<body class="bg-gray-100 text-gray-900 min-h-screen flex items-center justify-center p-6">

  <div class="max-w-4xl w-full bg-white rounded-xl shadow-lg p-8 relative overflow-hidden">
    <header class="mb-10 text-center">
      <h1 class="text-4xl font-extrabold text-indigo-600 mb-1">Complete the Questionnaire</h1>
      <p class="text-gray-500 text-sm">Please answer all the questions below to the best of your ability.</p>
    </header>

    <form th:action="@{/questions/submit}" method="post" class="space-y-10 relative min-h-[350px]" id="questionnaire-form">

      <!-- Progress dots -->
      <div class="flex justify-center space-x-4 mb-8">
        <template th:each="section, secStat : ${sections}">
          <button type="button"
            th:data-index="${secStat.index}"
            class="w-4 h-4 rounded-full bg-gray-300 hover:bg-indigo-400 transition-colors duration-300"
            aria-label="Section [[${secStat.index + 1}]]">
          </button>
        </template>
      </div>

      <!-- iterate sections -->
      <div th:each="section, secStat : ${sections}"
        class="section-block rounded-lg p-6 border border-gray-200 shadow-sm bg-white"
        th:classappend="${secStat.index == 0} ? 'active' : ''"
        th:attr="data-index=${secStat.index}">

        <div class="flex items-center justify-between mb-6 border-b border-gray-200 pb-4">
          <div>
            <h2 class="text-3xl font-semibold text-indigo-600" th:text="${section.sectionName}">Section name</h2>
            <p class="text-gray-500 mt-1" th:text="${section.description}">Section description</p>
          </div>
          <div class="text-gray-400 font-mono text-lg font-semibold tracking-wide">
            Section <span th:text="${section.sectionId}">1</span>
          </div>
        </div>

        <div class="space-y-8">
          <!-- iterate questions inside each section -->
          <div th:each="question : ${section.questions}" class="question-block">
            <p class="font-semibold text-lg mb-3" th:text="${question.questionText}">Question text</p>

            <!-- SECTION 1: checkboxes -->
            <div th:if="${section.sectionId == 1}"
              class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              <label th:each="option : ${question.options}"
                class="flex items-center space-x-3 bg-indigo-50 rounded-md p-3 cursor-pointer hover:bg-indigo-100 transition">
                <input type="checkbox" th:name="${'q_' + question.questionId + '[]'}"
                  th:value="${option.optionText}" class="form-checkbox h-5 w-5 text-indigo-600" />
                <span th:text="${option.optionText}" class="text-md"></span>
              </label>
            </div>

            <!-- SECTION 2 & 3: radios -->
            <div th:if="${section.sectionId != 1}"
              class="radio-row">

              <!-- If question.options is NOT empty, use them -->
              <label th:if="${#lists.isNotEmpty(question.options)}" th:each="option : ${question.options}"
                class="flex items-center space-x-2 cursor-pointer bg-indigo-50 rounded-md p-2 hover:bg-indigo-100 transition">
                <input type="radio" th:name="${'q_' + question.questionId}"
                  th:id="${'q_' + question.questionId + '_' + option.optionId}" th:value="${option.optionText}"
                  class="form-radio h-5 w-5 text-indigo-600" />
                <span th:text="${option.optionText}" class="text-md"></span>
              </label>

              <!-- If question.options is empty, use defaultOptions -->
              <label th:if="${#lists.isEmpty(question.options)}" th:each="optText, iterStat : ${defaultOptions}"
                class="flex items-center space-x-2 cursor-pointer bg-indigo-50 rounded-md p-2 hover:bg-indigo-100 transition">
                <input type="radio" th:name="${'q_' + question.questionId}"
                  th:id="${'q_' + question.questionId + '_default_' + iterStat.index}" th:value="${optText}"
                  class="form-radio h-5 w-5 text-indigo-600" />
                <span th:text="${optText}" class="text-md"></span>
              </label>

            </div>
          </div>
        </div>

        <!-- Navigation buttons -->
        <div class="flex justify-between mt-10">
          <button type="button"
            class="px-6 py-3 bg-gray-300 rounded-lg hover:bg-gray-400 transition disabled:opacity-50 disabled:cursor-not-allowed prev-btn">
            Previous
          </button>
          <button type="button"
            class="px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition disabled:opacity-50 disabled:cursor-not-allowed next-btn">
            Next
          </button>
        </div>

      </div>

      <!-- Final submit button -->
      <div id="submit-container" class="flex justify-center mt-8" style="display: none;">
        <button type="submit"
          class="w-80 px-7 py-3 bg-indigo-500 text-white rounded-lg shadow-lg hover:bg-indigo-700 transition">
          Submit
        </button>
      </div>

    </form>
  </div>

  <script>
    const sections = document.querySelectorAll('.section-block');
    const submitContainer = document.getElementById('submit-container');
    const progressDots = document.querySelectorAll('form > div.flex.justify-center > button');
    const form = document.getElementById('questionnaire-form');
    let currentSection = 0;

    function showSection(index) {
      sections.forEach((sec, i) => {
        if (i === index) {
          sec.classList.add('active');
        } else {
          sec.classList.remove('active');
        }
      });

      // Show/hide submit button
      submitContainer.style.display = (index === sections.length - 1) ? 'flex' : 'none';

      // Update progress dots styling
      progressDots.forEach((dot, i) => {
        dot.classList.toggle('bg-indigo-600', i === index);
        dot.classList.toggle('bg-gray-300', i !== index);
      });

      // Disable prev/next buttons conditionally
      sections.forEach((sec, i) => {
        const prevBtn = sec.querySelector('.prev-btn');
        const nextBtn = sec.querySelector('.next-btn');
        if (i === index) {
          prevBtn.disabled = index === 0;
          nextBtn.disabled = index === sections.length - 1;
        }
      });
    }

    function validateSection(index) {
      const section = sections[index];
      const questions = section.querySelectorAll('.question-block');
      let allValid = true;

      questions.forEach(questionBlock => {
        // Remove previous error highlight
        questionBlock.classList.remove('validation-error');

        // Get all inputs inside question block
        const inputs = questionBlock.querySelectorAll('input[type="checkbox"], input[type="radio"]');
        const name = inputs.length > 0 ? inputs[0].name : null;

        if (name) {
          // Check if any input with this name is checked
          const checked = Array.from(inputs).some(input => input.checked);
          if (!checked) {
            allValid = false;
            questionBlock.classList.add('validation-error');
          }
        }
      });

      return allValid;
    }

    sections.forEach((sec, i) => {
      const prevBtn = sec.querySelector('.prev-btn');
      const nextBtn = sec.querySelector('.next-btn');

      prevBtn.addEventListener('click', () => {
        if (currentSection > 0) {
          currentSection--;
          showSection(currentSection);
        }
      });

      nextBtn.addEventListener('click', () => {
        if (validateSection(i)) {
          if (currentSection < sections.length - 1) {
            currentSection++;
            showSection(currentSection);
          }
        } else {
          alert('Please answer all questions before proceeding.');
        }
      });
    });

    progressDots.forEach((dot, i) => {
      dot.addEventListener('click', () => {
        // Optional: Validate before jumping to section
        // If you want, you can add validation here too
        currentSection = i;
        showSection(i);
      });
    });

    form.addEventListener('submit', (e) => {
      // Validate last section before submit
      if (!validateSection(sections.length - 1)) {
        e.preventDefault();
        alert('Please answer all questions before submitting.');
      }
    });

    // Initialize
    showSection(currentSection);
  </script>

</body>

</html>
